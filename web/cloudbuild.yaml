steps:
- name: node
  entrypoint: npm
  args: ['--prefix', 'web', 'install']
- name: node
  entrypoint: npm
  args: ['--prefix', 'web', 'test']
- id: Build Image
  name: 'gcr.io/cloud-builders/docker'
  args: [ 'build', 
          '--build-arg', 'PORT=${_PORT}',
          '--build-arg', 'API_HOST=${_API_HOST}',
          '--build-arg', 'IMG_LINK=${_IMG_LINK}',
          '-t', '${_ARTIFACT_LOCATION}-docker.pkg.dev/${_GCP_PROJECT_ID}/${_ARTIFACT_REPO_NAME}/${_IMAGE_NAME}', 
          '-f', '${_DOCKERFILE_PATH}', 
          '.' ]
- id: scan
  name: gcr.io/google.com/cloudsdktool/cloud-sdk
  entrypoint: /bin/bash
  args:
  - -c
  - |
    gcloud artifacts docker images scan ${_ARTIFACT_LOCATION}-docker.pkg.dev/${_GCP_PROJECT_ID}/${_ARTIFACT_REPO_NAME}/${_IMAGE_NAME}:latest \
    --format='value(response.scan)' > /workspace/scan_id.txt
- id: severity check
  name: gcr.io/google.com/cloudsdktool/cloud-sdk
  entrypoint: /bin/bash
  args:
  - -c
  - |
    gcloud artifacts docker images list-vulnerabilities $(cat /workspace/scan_id.txt) \
    --format='value(vulnerability.effectiveSeverity)' | if grep -Fxq $_SCAN_SEVERITY; \
    then echo 'Failed vulnerability check' && exit 1; else exit 0; fi
- id: Push Image
  name: 'gcr.io/cloud-builders/docker'
  args: ['push', '${_ARTIFACT_LOCATION}-docker.pkg.dev/${_GCP_PROJECT_ID}/${_ARTIFACT_REPO_NAME}/${_IMAGE_NAME}:latest']
- id: Customise K8s yaml
  name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: "/bin/sh"
  args: ['-c', 'cat ./api/k8s-api.yaml | sed s/{{attribute-to-replace}}/${_VAR-FROM-TRIGGER}/g > custom.yaml']
- id: Deploy to GKE
  name: "gcr.io/cloud-builders/gke-deploy"
  args:
  - run
  - --filename=./web/k8s-web.yaml
  - --image=${_ARTIFACT_LOCATION}-docker.pkg.dev/${_GCP_PROJECT_ID}/${_ARTIFACT_REPO_NAME}/${_IMAGE_NAME}:latest
  - --location=${_GKE_LOCATION}
  - --cluster=${_GKE_CLUSTER}
